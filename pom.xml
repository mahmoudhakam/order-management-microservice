<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.carbon</groupId>
    <artifactId>order-management</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <name>order-management/parent</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.0-M1</version>
        <relativePath/>
    </parent>

    <modules>
        <module>warehouse-carbon-service</module>
        <module>order-carbon-service</module>
        <module>notification-carbon-service</module>
        <module>payment-carbon-service</module>
        <module>customer-carbon-service</module>
        <module>product-catalogue-carbon-service</module>
        <module>HA-discovery-server</module>
        <module>config-server</module>
        <module>edge-server</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>14</java.version>
        <maven.compiler.source>14</maven.compiler.source>
        <maven.compiler.target>14</maven.compiler.target>
        <docker.image.prefix>carbon</docker.image.prefix>
        <docker.plugin.version>0.3.258</docker.plugin.version>
        <springdoc-openapi-ui.version>1.5.9</springdoc-openapi-ui.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
        <mapstruct.version>1.4.2.Final</mapstruct.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.surefire.plugin.version>3.0.0-M4</maven.surefire.plugin.version>
        <maven.failsafe.plugin.version>3.0.0-M4</maven.failsafe.plugin.version>
        <maven.plugin.properties.version>1.0.0</maven.plugin.properties.version>
        <maven.plugin.version.version>2.7</maven.plugin.version.version>
        <maven.plugin.dockerfile.version>1.4.13</maven.plugin.dockerfile.version>
        <!--        <project.config.file.location>${project.basedir}/config/store.properties-->
        <!--        </project.config.file.location>-->
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- Open Api -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-webflux-ui</artifactId>
            <version>${springdoc-openapi-ui.version}</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>2020.0.0-M3</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <release>${java.version}</release>
                        <compilerArgs>--enable-preview</compilerArgs>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstruct.version}</version>
                            </path>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <configuration>
                        <argLine>--enable-preview</argLine>
                        <includes>
                            <include>**/*Tests.java</include>
                            <include>**/*Test.java</include>
                        </includes>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.plugin.version}</version>
                    <configuration>
                        <argLine>--enable-preview</argLine>
                    </configuration>
                </plugin>
                <plugin>
                    <!--
                        It is the de-facto standard way to handle
                        versions management nowadays, when you want to manage the versions of
                        artifacts in a project's POM.
                    -->
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${maven.plugin.version.version}</version>
                </plugin>

                <!-- Start - reading external properties -->
                <!--               <plugin>-->
                <!--                   <groupId>org.codehaus.mojo</groupId>-->
                <!--                   <artifactId>properties-maven-plugin</artifactId>-->
                <!--                   <version>${maven.plugin.properties.version}</version>-->
                <!--                   <executions>-->
                <!--                       <execution>-->
                <!--                           <phase>initialize</phase>-->
                <!--                           <goals>-->
                <!--                               <goal>read-project-properties</goal>-->
                <!--                           </goals>-->
                <!--                           <configuration>-->
                <!--                               &lt;!&ndash;To continue working if file is messing when set to true &ndash;&gt;-->
                <!--                               <quiet>false</quiet>-->
                <!--                               <files>-->
                <!--                                   <file>${project.config.file.location}</file>-->
                <!--                               </files>-->
                <!--                           </configuration>-->
                <!--                       </execution>-->
                <!--                   </executions>-->
                <!--               </plugin>-->
                <!-- End - reading external properties -->

                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <!-- Make final jar, a layered jar -->
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <!--
                                    To generate build information to be included via
                                    http(s)://<hostname>:<port>/actuator/info
                                 -->
                                <goal>build-info</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <!--
                         It automatically creates the versioning information during a build
                         so that you are able to verify the versioning information when
                         an application is deployed
                    -->
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>get-the-git-infos</id>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>validate-the-git-infos</id>
                            <goals>
                                <goal>validateRevision</goal>
                            </goals>
                            <phase>package</phase>
                        </execution>
                    </executions>
                    <configuration>
                        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                        <prefix>git</prefix>
                        <verbose>false</verbose>
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
                        </generateGitPropertiesFilename>
                        <!--
                             Very important to make sure that the format is set to "properties"
                             (which is the default value if format tag is omitted)
                             instead of "JSON" in order to work with spring actuator
                        -->
                        <format>properties</format>
                        <!--<format>json</format>-->
                        <gitDescribe>
                            <skip>false</skip>
                            <always>false</always>
                            <dirty>-dirty</dirty>
                        </gitDescribe>
                        <validationProperties>
                            <!-- verify that the current repository is not dirty -->
                            <validationProperty>
                                <name>validating git dirty</name>
                                <!--<value>${git.dirty}</value>-->
                                <value>false</value>
                                <shouldMatchTo>false</shouldMatchTo>
                            </validationProperty>
                        </validationProperties>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <compilerArgs>--enable-preview</compilerArgs>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <argLine>--enable-preview</argLine>
                    <includes>
                        <include>**/*Tests.java</include>
                        <include>**/*Test.java</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.failsafe.plugin.version}</version>
                <configuration>
                    <argLine>--enable-preview</argLine>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    It is the de-facto standard way to handle
                    versions management nowadays, when you want to manage the versions of
                    artifacts in a project's POM.
                -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${maven.plugin.version.version}</version>
            </plugin>

            <!-- Start - reading external properties -->
            <!--               <plugin>-->
            <!--                   <groupId>org.codehaus.mojo</groupId>-->
            <!--                   <artifactId>properties-maven-plugin</artifactId>-->
            <!--                   <version>${maven.plugin.properties.version}</version>-->
            <!--                   <executions>-->
            <!--                       <execution>-->
            <!--                           <phase>initialize</phase>-->
            <!--                           <goals>-->
            <!--                               <goal>read-project-properties</goal>-->
            <!--                           </goals>-->
            <!--                           <configuration>-->
            <!--                               &lt;!&ndash;To continue working if file is messing when set to true &ndash;&gt;-->
            <!--                               <quiet>false</quiet>-->
            <!--                               <files>-->
            <!--                                   <file>${project.config.file.location}</file>-->
            <!--                               </files>-->
            <!--                           </configuration>-->
            <!--                       </execution>-->
            <!--                   </executions>-->
            <!--               </plugin>-->
            <!-- End - reading external properties -->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- Make final jar, a layered jar -->
                    <layers>
                        <enabled>true</enabled>
                    </layers>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!--
                                To generate build information to be included via
                                http(s)://<hostname>:<port>/actuator/info
                             -->
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                     It automatically creates the versioning information during a build
                     so that you are able to verify the versioning information when
                     an application is deployed
                -->
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>validate-the-git-infos</id>
                        <goals>
                            <goal>validateRevision</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
                <configuration>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <prefix>git</prefix>
                    <verbose>false</verbose>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
                    </generateGitPropertiesFilename>
                    <!--
                         Very important to make sure that the format is set to "properties"
                         (which is the default value if format tag is omitted)
                         instead of "JSON" in order to work with spring actuator
                    -->
                    <format>properties</format>
                    <!--<format>json</format>-->
                    <gitDescribe>
                        <skip>false</skip>
                        <always>false</always>
                        <dirty>-dirty</dirty>
                    </gitDescribe>
                    <validationProperties>
                        <!-- verify that the current repository is not dirty -->
                        <validationProperty>
                            <name>validating git dirty</name>
                            <!--<value>${git.dirty}</value>-->
                            <value>false</value>
                            <shouldMatchTo>false</shouldMatchTo>
                        </validationProperty>
                    </validationProperties>
                </configuration>
            </plugin>

        </plugins>

    </build>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>jcenter-snapshots</id>
            <name>jcenter</name>
            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </pluginRepository>
        <pluginRepository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>
